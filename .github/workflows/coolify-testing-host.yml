name: Coolify Testing Host (v4-non-prod)

on:
  push:
    branches: [ "main", "next" ]
    paths:
      - .github/workflows/coolify-testing-host.yml
      - docker/testing-host/Dockerfile

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: "coollabsio/coolify-testing-host"

jobs:
  amd64:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN  }}
      - name: Build image and push to registry
        uses: docker/build-push-action@v5
        with:
          no-cache: true
          context: .
          file: docker/testing-host/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
  aarch64:
    runs-on: [ self-hosted, arm64 ]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN  }}
      - name: Build image and push to registry
        uses: docker/build-push-action@v5
        with:
          no-cache: true
          context: .
          file: docker/testing-host/Dockerfile
          platforms: linux/aarch64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-aarch64
  merge-manifest:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: [ amd64, aarch64 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN  }}
      - name: Create & publish manifest
        run: |
          docker buildx imagetools create --append ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-aarch64 --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
      - uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_DEV_RELEASE_CHANNEL  }}
